<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>{{ title }}</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
  <link rel="stylesheet" href="css/pico.min.css">
  <link rel="stylesheet" href="css/style.css">
  <link href="pagefind/pagefind-ui.css" rel="stylesheet">
<script src="pagefind/pagefind-ui.js"></script>
</head>
<body>

  <div class="container"> 
    <h1>{{ title }}</h1>
    
    <input type="text" id="search-input" placeholder="Search...">
      <select id="software-filter">
      <option value="">All</option>
      <option value="SteamVR">SteamVR</option>
      <option value="Monado">Monado</option>
      <option value="ALVR">ALVR</option>
      <option value="wivrn">wivrn</option>
      </select>


      <select id="rating-filter" disabled>
      <option value="">Any</option>
      <option value="1">Perfect</option>
      <option value="2">Requires manual configuration or better</option>
      <option value="3">Playable with graphical/controller issues or better</option>
      <option value="4">Unplayable because of graphical/controller issues or better</option>
      <option value="5">Crashes or won't start or better</option>
      </select>

  </div>

<div id="search" class="container game-list games-container"></div>
 <!-- en una etiqueta meta se supone que no se carga en el DOM y luego se podría recuperar con algo como este ejemplo
    html
    <div id="myDiv">Hola mundo</div>
    js
    const templateContent = document.getElementById('template').content;
    const div = templateContent.querySelector('#myDiv');
    console.log(div.textContent); // "Hola mundo"

    el contenido que tengo comentado ya se genera comentado en la pagina tambien con algun regex
  -->
<script>
  let resultShow;

  window.addEventListener('DOMContentLoaded', (event) => {
    new PagefindUI({
      element: "#search",
      showSubResults: false,
      processResult: async function (result) {
        resultShow = result;
        console.log(resultShow);
        // Llamar a la función para obtener los datos de ALVR
        
        result = await fetchGameData('244210').then((alvrValue) => {
          result.excerpt = alvrValue; // Asignar el valor de ALVR al resultado
          console.log('ALVR Value:', alvrValue);
          return result;
        });

        
        console.log('RESULTADOOOOO:', result);
      }
    });
  });

  // Función para obtener los datos del juego usando fetch
  async function fetchGameData(id) {
    try {
      // Hacer fetch al archivo JSON generado por Eleventy
      const response = await fetch('games-data.json');
      const gamesData = await response.json();
      
      // Buscar el juego por id
      const game = gamesData.find(game => game.id === id);
      
      // Si se encuentra el juego, devolver el valor de ALVR
      if (game) {
        return game.averages.alvr;
      } else {
        console.log(`No se encontró el juego con el id: ${id}`);
        return null;
      }
    } catch (error) {
      console.error("Error al obtener los datos del juego:", error);
      return null;
    }
  }
</script>


<section>
  <!--


-->
</section>

<script>
function applyFilters() {
  const softwareValue = document.getElementById('software-filter').value.toLowerCase();
  const ratingFilter = document.getElementById('rating-filter');
  const ratingValue = parseFloat(ratingFilter.value);
  const searchValue = document.getElementById('search-input').value.toLowerCase(); 

  const games = document.querySelectorAll('.game-card');

  if (softwareValue === "") {
    ratingFilter.value = "";
    ratingFilter.disabled = true;

    games.forEach(game => {
      const gameTitle = game.querySelector('h3').innerText.toLowerCase();
      if (searchValue === "" || gameTitle.includes(searchValue)) {
        game.parentElement.style.display = ''; 
      } else {
        game.parentElement.style.display = 'none'; 
      }
    });
    return; 
  } else {
    ratingFilter.disabled = false;
  }

  games.forEach(game => {
    const gameInfo = game.querySelector('.game-info').innerText.toLowerCase();
    const gameTitle = game.querySelector('h3').innerText.toLowerCase();

    // Aquí filtramos por la clase 'rating-X', donde X es el valor de la media
    const ratings = game.querySelectorAll('.rating');
    const satisfiesSoftware = gameInfo.includes(softwareValue);
    const satisfiesSearch = searchValue === "" || gameTitle.includes(searchValue);

    let satisfiesRating = true;

    // Mapa de ratings y software 
    const softwareList = game.querySelectorAll('.software-list td');
    const ratingList = game.querySelectorAll('.rating-list td');
    const ratingMap = new Map();
    softwareList.forEach((sft, k) => {

      const classList = Array.from(ratingList[k].querySelector('i').classList);
      const ratingClass = classList.find(c => c.startsWith('rating-'));
      const ratingNumber = parseInt(ratingClass.split('-')[1]);

      ratingMap.set(sft.innerText.toLowerCase(), ratingNumber);
    });

    // Aunque a este caso nunca se podría llegar ahora mismo, porque el filtro de rating
    // está deshabilitado hasta que se indica un software en el filtro de software.
    if (ratingValue && !softwareValue && !searchValue) {
      satisfiesRating = ratingMap.values().some(rating => {
        // Aquí comprobamos si la clase 'rating-X' existe para el valor que queremos
        return rating <= ratingValue;
      });
    } else if (ratingValue && softwareValue && !searchValue) {
      satisfiesRating = ratingMap.has(softwareValue) && ratingMap.get(softwareValue) <= ratingValue;
    }

    $satisfiesRating = satisfiesSearch && satisfiesSoftware && satisfiesRating;

    if (satisfiesSoftware && satisfiesRating && satisfiesSearch) {
      game.parentElement.style.display = ''; 
    } else {
      game.parentElement.style.display = 'none'; 
    }
  });
}

document.getElementById('software-filter').addEventListener('change', applyFilters);
document.getElementById('rating-filter').addEventListener('change', applyFilters);
document.getElementById('search-input').addEventListener('input', applyFilters);

</script>



  
</body>
</html>
